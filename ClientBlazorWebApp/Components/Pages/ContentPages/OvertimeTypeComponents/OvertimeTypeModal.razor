
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                
                <h5 class="modal-title" id="exampleModalLabel">@Title Overtime Type</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"
                    aria-label="Close" ></button>
            </div>
        
            <div class="modal-body">
               
                <div style="padding: 1rem 0px;">
                    <div class="card-content">
                        
                           
                                    <EditForm Model="OvertimeType" Enhance OnValidSubmit="SubmitCardDetails"class="row g-3">
                                        <DataAnnotationsValidator />
                                            <AlertComponent  />   
                                            
                                                <div class="card-container">
                                                     <OvertimeTypeInformationComponent  overtimeType="OvertimeType"/>
                                                </div>
                                                  
                                        <button type="submit" class="btn btn-primary col-5 ">@Title Overtime Type</button>
                                    </EditForm>
                                   
                                             
                                              
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
@code
{
    [Parameter]
    public OvertimeType OvertimeType { get; set; } = new();
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<List<OvertimeType>>OnLoadingNewOvertimeTypes{ get; set; }

        public List<OvertimeType> OvertimeTypes { get; set; } = new();
    bool successCheck;
    string? message;
     private async Task GetOvertimeTypes()
    {
        OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
    }
    public  async Task SubmitCardDetails()
    {


        if(OvertimeType.Id>0)
        {
            var result =await  overtimeTypeService.Update(OvertimeType, Constants.OvertimeTypeBaseUrl);
            successCheck =result.Flag;

            if (successCheck) message = "Overtime Type Updated Successfully";

            message = result.Message;
            await GetOvertimeTypes();
            await OnLoadingNewOvertimeTypes.InvokeAsync(OvertimeTypes);
        }
        else
        {
            var result =await  overtimeTypeService.Insert(OvertimeType, Constants.OvertimeTypeBaseUrl);
            successCheck = result.Flag;
            if (successCheck) message = "Overtime Type Added Successfully";
            message =result.Message;
            await GetOvertimeTypes();
            await OnLoadingNewOvertimeTypes.InvokeAsync(OvertimeTypes);
        }

        AllState.TriggerAlert(successCheck,message);


        if((bool)successCheck)
        {

            OvertimeType = new();
          
        }

    }
}
