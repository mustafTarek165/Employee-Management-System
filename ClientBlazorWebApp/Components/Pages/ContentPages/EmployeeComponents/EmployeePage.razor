@implements IDisposable
@inject IJSRuntime JS
@if (AllState.ShowEmployee)
{

    if (ShowMainPage)
    {
            
      
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                         
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i>
                                Add Employee
                            </button>
                            <button class="btn btn-outline-success" @onclick="GeneratePdf">
                                   <i class="bi bi-plus-circle-dotted"></i>
                                Generate PDF
                            </button>
                         
                        <EmployeeOptions  employee="employee" OnLoadingNewEmployees="AssignNewEmployees" />
                        </div>

                        <div class="card-header">
                            <div class="card-body">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Photo</th>
                                            <th scope="col"> Employee Id</th>
                                            <th scope="col">Name</th>
                                            <th scope="col">File Number </th>
                                            <th scope="col">Civil Id </th>

                                            <th scope="col">Telephone Number </th>
                                            <th scope="col">Job Name </th>
                                            <th scope="col">Branch Name </th>
                                            <th scope="col">Town Name </th>
                                            <th>
                                                <i class="bi bi-menu-down text-primary"  data-bs-toggle="modal" data-bs-target="#exampleModal"></i>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @if (Employees is not null)
                                        {

                                            int count = 1;
                                            foreach (var item in Employees)
                                            {
                                                <tr>
                                                    
                                                    <th scope="row">@count</th>
                                                    
                                                    <th >
                                                        <img src="@item.Photo" alt="@item.Name" width="100" height="100"/>
                                                     </th>
                                                     <td>@item.Id</td>
                                                    <td>@item.Name</td>
                                                    <td>@item.FileNumber</td>
                                                    <td>@item.CivilId</td>
                                                    <td>@item.TelephoneNumber  </td>
                                                    <td>@item.JobName </td>
                                                    <td>@item.Branch?.Name </td>
                                                    <td>@item.Town?.Name </td>
                                                    <td>
                                                        <i class="bi bi-menu-down text-primary" id="cursorStyle"@onclick="()=>SelectEmployee(item)"  data-bs-toggle="modal" data-bs-target="#exampleModal"></i>
                                                     
                                                    </td>

                                                </tr>
                                                count++;
                                            }

                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="4">
                                                    <div class="alert alert-info text-center">
                                                        No Employees added yet!
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

}
<AddOrUpdateEmployee 
    ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"  
    NotifyParentFormCloseClicked="UpdateState"/>
@code {

    public List<Employee> Employees { get; set; } = [];

    public Employee employee { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {

        await GetEmployees();

        AllState.Action += StateHasChanged;
    }
    private async Task GetEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }
    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }
    void UpdateState(List<Employee>employees)
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        Employees = employees;
    }
    void SelectEmployee(Employee _employee)
    {
        employee = _employee;
    }
    void AssignNewEmployees(List<Employee>employees)
    {
        Employees = employees;
        AllState.TriggerAlert(true, "Employee Updated Successfully!");
    }



    /// <summary>
    /// generate pdf
    /// </summary>
   private async Task GeneratePdf()
    {
        var title = "Employee Details";
        var headers = new[] { "ID", "Name", "File Number", "Civil ID", "Telephone", "Job Name", "Branch Name", "Town Name" };
        var rows = Employees.Select(e => new[]
        {
            e.Id.ToString(),
            e.Name,
            e.FileNumber,
            e.CivilId,
            e.TelephoneNumber,
            e.JobName,
            e.Branch.Name,
            e.Town.Name
        }).ToArray();

        await JS.InvokeVoidAsync("generatePdf", title, headers, rows);
    }

   
}
