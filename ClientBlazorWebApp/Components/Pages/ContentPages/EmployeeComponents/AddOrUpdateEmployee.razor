@if (AllState.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-5">
                <div class="col-lg-1 text-center">
                    <i class="bi bi-x-lg fs-3 fw-bold text-danger" @onclick="CloseForm"></i>
                </div>
                <div class="col-lg-6 text-center">
                    <h2>Add Employee</h2>
                </div>
           
            </div>
            <div class="row">
                <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                    <div class="hstack">
       
                        @if (FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>

                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv2 format-border"></div>
                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>

                            <div class="@FloatingNumber1 text-center">2</div>
                            <div class="@Floatingdiv1 format-border"></div>
                        }
                    </div>
                </div>
                <AlertComponent/>
                <!-- Employee form/first/second layers -->
                <div class="col-lg-12">
                    <div class="container-fluid">
                        @if (FirstLayer)
                        {

                            <EditForm Model="@EmployeeGroup1" OnValidSubmit="Form1">
                                <DataAnnotationsValidator/>
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold">Personal Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Full Name</label>
                                                <InputText @bind-Value="EmployeeGroup1.Name"  class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Telephone</label>
                                                <InputText @bind-Value="EmployeeGroup1.TelephoneNumber"  class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Address</label>
                                                <InputText @bind-Value="EmployeeGroup1.Address"  class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.Address" class="text-danger" />
                                            </div>
                                            
                                            
                                                <div class="form-control mt-2">
                                                    @if(!string.IsNullOrEmpty(EmployeeGroup1.Photo))
                                                    {
                                                          <img src="@EmployeeGroup1.Photo" width="100" height="100"/>
                                                    }
                                                    else 
                                                    {
                                                        <span>Select photo ..</span>
                                                    }
                                              
                                            </div>
                                            
                                            
                                        </div>
                                    </div>
                                    <div class="col-lg-4 mt-2">
                                        <div class="card-title mb-5 fw-bold">Other Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Civil Id</label>
                                                <InputText @bind-Value="EmployeeGroup1.CivilId"  class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">File Number</label>
                                                <InputText @bind-Value="EmployeeGroup1.FileNumber"  class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label @(ImageUploadMessage=="" ? "":"text-danger")" >
                                                     @(ImageUploadMessage=="" ? "Upload Image":ImageUploadMessage)
                                                </label>
                                               <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                                <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-5">
                                                <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                                    <i class="bi bi-arrow-right"></i>
                                                    Next
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                        @if (SecondLayer)
                        {
                           <EditForm Model="EmployeeGroup2" OnValidSubmit="Form2">
                               <DataAnnotationsValidator/>
                               <div class="row">
                                   <div class="col-lg-2"></div>
                                   <div class="col-lg-4">
                                       <div class="card-title mb-5 fw-bold"> Job Information</div>
                                       <div class="card-body">
                                           <div class="form-group">
                                                <label class="form-label">Job Name</label>
                                                <InputText @bind-Value="EmployeeGroup2.JobName"  class="form-control" />
                                                <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger" />
                                           </div>
                                           <div class="card-container">
                                                   
                                                   <DropDownList TItem="GeneralDepartment"
                                                       Label="General Department"
                                                       Items="defaultGeneralDepartments"
                                                       GetItemId="department => department.Id"
                                                       GetItemName="department => department.Name"
                                                      
                                                       SelectedItemIdChanged="OnGeneralDepartmentSelected" />
                                             </div>

                                              <div class="card-container">
                                                   
                                                   <DropDownList TItem="Department"
                                                       Label="Department"
                                                       Items="selectedDepartments"
                                                       GetItemId="department => department.Id"
                                                       GetItemName="department => department.Name"
                                                      
                                                       SelectedItemIdChanged="OnDepartmentSelected" />
                                             </div>
                                              <div class="card-container">
                                                   
                                                   <DropDownList TItem="Branch"
                                                       Label="Branch"
                                                       Items="selectedBranches"
                                                       GetItemId="b => b.Id"
                                                       GetItemName="b => b.Name"
                                                      
                                                       SelectedItemIdChanged="OnBranchSelected" />
                                             </div>
                                             <div class="form-group mt-4 mb-5">
                                                 <button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
                                                   <i class="bi bi-arrow-left"></i>
                                                    Prev  
                                               </button>
                                                
                                             </div>
                                       </div>
                                   </div>
                                   <div class="col-lg-4">
                                       <div class="card-title mb-5 fw-bold"> Location Information</div>
                                       <div class="card-body">
                                         
                                            <div class="card-container">
                                                   
                                                   <DropDownList TItem="Country"
                                                       Label="Country"
                                                       Items="defaultCountries"
                                                       GetItemId="b => b.Id"
                                                       GetItemName="b => b.Name"
                                                      
                                                       SelectedItemIdChanged="OnCountrySelected" />
                                             </div>
                                              <div class="card-container">
                                                   
                                                   <DropDownList TItem="City"
                                                       Label="City"
                                                       Items="selectedCities"
                                                       GetItemId="b => b.Id"
                                                       GetItemName="b => b.Name"
                                                      
                                                       SelectedItemIdChanged="OnCitySelected" />
                                             </div>
                                              <div class="card-container">
                                                   
                                                   <DropDownList TItem="Town"
                                                       Label="Town"
                                                       Items="selectedTowns"
                                                       GetItemId="b => b.Id"
                                                       GetItemName="b => b.Name"
                                                      
                                                       SelectedItemIdChanged="OnTownSelected" />
                                             </div>
                                             <div class="form-group mt-3">
                                                 <label class="form-label">Other</label>
                                                 <textarea @bind="EmployeeGroup2.Other" placeholder="Optional" class="form-control"></textarea>
                                              
                                             </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-success float-end" type="submit">
                                                    <i class="bi bi-save"></i>
                                                    Save
                                                </button>
                                            </div>
                                       </div>
                                   </div>
                                   <div class="col-lg-2"></div>
                               </div>
                           </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {


    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();


    [Parameter] public Employee Employee { get; set; } = new();
    //Defaults Lists from database
    public List<Country> defaultCountries { get; set; } = new();
    public List<City> defaultCities { get; set; } = new();
    public List<Town> defaultTowns { get; set; } = new();
    public List<GeneralDepartment> defaultGeneralDepartments { get; set; } = new();
    public List<Department> defaultDepartments { get; set; } = new();
    public List<Branch> defaultBranches { get; set; } = new();
    //Selected Lists
    public List<City> selectedCities { get; set; } = new();
    public List<Town> selectedTowns { get; set; } = new();

    public List<Department> selectedDepartments { get; set; } = new();
    public List<Branch> selectedBranches { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        defaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        defaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        defaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);

        defaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        defaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        defaultTowns = await townService.GetAll(Constants.TownBaseUrl);
    }


    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";
    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";
    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;
    bool successCheck;
    string? message;

    public string Title { get; set; } = "Add";
    public string GeneralDepartment { get; set; } = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";

    public string Country { get; set; } = "";
    public string City { get; set; } = "";
    public string Town { get; set; } = "";

    private void ShowLayer2() {
        FirstLayer = false;
        SecondLayer = true;
    }

    void PrevClicked() {
        FirstLayer = true;
        SecondLayer = false;
    }
    //Forms Validation
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber)

        || string.IsNullOrEmpty(EmployeeGroup1.Address)

            || string.IsNullOrEmpty(EmployeeGroup1.CivilId)
        ) return false;
        return true;
    }
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName) || EmployeeGroup2.TownId==0 ||EmployeeGroup2.BranchId==0) return false;
        return true;
    }
    //save forms

    private void Form1()
    {
        var isValid=ValidateEmployeeGroup1();
        if(isValid)
        {
            Employee.Name=EmployeeGroup1.Name;
            Employee.TelephoneNumber=EmployeeGroup1.TelephoneNumber;
            Employee.Address=EmployeeGroup1.Address;
            Employee.CivilId=EmployeeGroup1.CivilId;
            Employee.FileNumber=EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();

        }
    }
    private async void Form2()
    {

        var isValid=ValidateEmployeeGroup2();
        if(isValid)
        {
            Employee.JobName=EmployeeGroup2.JobName;
            Employee.Other=EmployeeGroup2.Other;
            Employee.BranchId=EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;

            await AddOrUpdate();
            ClearContent();
        }
    }
    async Task AddOrUpdate()
    {
        if(Employee.Id>0)
        {
            var result =await  employeeService.Update(Employee, Constants.EmployeeBaseUrl);
            successCheck =result.Flag;

            if (successCheck) message = "Employee Updated Successfully";

            message = result.Message;

            await CloseForm();
        }
        else
        {
            var result =await  employeeService.Insert(Employee, Constants.EmployeeBaseUrl);
            successCheck = result.Flag;
            if (successCheck) message = "A new Employee Added Successfully";
            message =result.Message;
            // await GetDepartments();
            // await OnLoadingNewDepartments.InvokeAsync(departments);

        }


        AllState.TriggerAlert(successCheck,message);

        if((bool)successCheck)
        {

            ClearContent();
        }
    }
    void ClearContent()
    {
        EmployeeGroup1=new();
        EmployeeGroup2 = new();
        Employee = new();
    }
    private async Task GetEmployees()
    {
        employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }
    [Parameter] public EventCallback<List<Employee>> NotifyParentFormCloseClicked { get; set; }
    public List<Employee> employees { get; set; } = new();

    async Task CloseForm() {
        await GetEmployees();
        await NotifyParentFormCloseClicked.InvokeAsync(employees);

    }
     

    void OnGeneralDepartmentSelected(int value)
    {
        selectedDepartments = defaultDepartments.Where(x => x.GeneralDepartmentId == value).ToList();

    }
    void OnDepartmentSelected(int value)
    {
        selectedBranches = defaultBranches.Where(x =>x.DepartmentId == value).ToList();
    }
    void OnBranchSelected(int value)
    {
        EmployeeGroup2.BranchId = value;
    }
    void OnCountrySelected(int value)
    {
        selectedCities = defaultCities.Where(x => x.CountryId == value).ToList();

    }
    void OnCitySelected(int value)
    {
        selectedTowns = defaultTowns.Where(x => x.CityId == value).ToList();
    }
    void OnTownSelected(int value)
    {
        EmployeeGroup2.TownId = value;
    }
    
    //file upload
    string ImageUploadMessage = "";

    async void UploadImage(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var format = imageFile.ContentType; // Get the MIME type of the uploaded file

        var resizeImage = await imageFile.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        ImageUploadMessage = "";
        EmployeeGroup1.Photo = imageData;

        imageData = "";
        StateHasChanged();
    }

}
