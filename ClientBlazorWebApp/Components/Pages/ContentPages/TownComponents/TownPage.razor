
@implements IDisposable
@if(AllState.ShowTown)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                   
                    <div class="card-header">
                        <h4 class="float-start"> Town</h4>

                       

                        <div class=" float-end" >
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="ResetAll">
                                Add New Town
                            </button>
                            
                        </div>

                        <TownModal   Town="Town" Title="@Title" OnLoadingNewTowns="LoadNewTowns" />
                    </div>
                    <div class="card-header">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">Id</th>
                                     
                                        <th scope="col">City</th>
                                        <th scope="col">Town </th>
                                        <th scope="col"> Action</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @if(Towns is not null)
                                    {

                                        int count = 1;
                                        foreach(var item in Towns)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                              
                                                <td>@item.City?.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)" data-bs-toggle="modal" data-bs-target="#exampleModal"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }

                                    }
                                    else
                                    {
                                     <tr>
                                         <td colspan="4">
                                             <div class="alert alert-info text-center">
                                                 No  Towns added yet!
                                             </div>
                                         </td>
                                     </tr>   
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {

    public List<Town> Towns { get; set; } = new();
    public Town Town { get; set; } = new();
    public string Title { get; set; } = "Add";



    protected async override Task OnInitializedAsync()
    {

        await GetTowns();

        AllState.Action += StateHasChanged;
    }
    private async Task GetTowns()
    {
        Towns = await townService.GetAll(Constants.TownBaseUrl);
    }
    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
    private void EditClicked(Town _Town)
    {
        Town=_Town;
        Title = "Update";
    }
    private async Task DeleteClicked(Town Town)
    {
        var response = await townService.DeleteById(Town.Id, Constants.TownBaseUrl);
        await GetTowns();
        AllState.TriggerAlert(true,"Town Deleted Successfully");
    }
    void LoadNewTowns(List<Town>_Towns)
    {
        Towns = _Towns;
    }
    private void ResetAll()
    {
        // Close the alert by rerendring with null
        AllState.TriggerAlert(null, "");
        Town = new();
        Title = "Add";
    }
}
